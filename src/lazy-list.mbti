// Generated using `moon info`, DON'T EDIT IT
package "CAIMEOX/lazy-list"

import(
  "CAIMEOX/lazy"
  "moonbitlang/core/immut/list"
)

// Values
fn[X : Default] default() -> LazyList[X]

fn[X : Add] infinite_stream(X, X) -> LazyList[X]

fn nats() -> LazyList[Int]

fn[T] repeat(T) -> LazyList[T]

fn[X : Add] sum(LazyList[X], init~ : X) -> X

fn[T] zip_plus((T, T) -> T, LazyList[T], LazyList[T]) -> LazyList[T]

// Errors

// Types and methods
pub(all) enum LazyList[T] {
  Nil
  Cons(T, @lazy.Lazy[LazyList[T]])
}
fn[T] LazyList::concat(Self[T], Self[T]) -> Self[T]
fn[T] LazyList::drop(Self[T], Int) -> Self[T]
fn[T] LazyList::drop_while(Self[T], (T) -> Bool) -> Self[T]
fn[T] LazyList::each(Self[T], (T) -> Unit) -> Unit
fn[T] LazyList::eachi(Self[T], (Int, T) -> Unit) -> Unit
fn[T] LazyList::filter(Self[T], (T) -> Bool) -> Self[T]
fn[T, U] LazyList::flat_map(Self[T], (T) -> Self[U]) -> Self[U]
fn[T] LazyList::flatten(Self[Self[T]]) -> Self[T]
fn[T, U] LazyList::fold_left(Self[T], (U, T) -> U, init~ : U) -> U
fn[T, U] LazyList::fold_right(Self[T], (T, U) -> U, init~ : U) -> U
fn[T] LazyList::from_array(Array[T]) -> Self[T]
fn[T] LazyList::from_list(@list.T[T]) -> Self[T]
fn[T] LazyList::head(Self[T]) -> T
fn[T] LazyList::index(Self[T], Int) -> T
fn[T] LazyList::length(Self[T]) -> Int
fn[T, U] LazyList::map(Self[T], (T) -> U) -> Self[U]
fn[T] LazyList::split_at(Self[T], Int) -> (Self[T], Self[T])
fn[T] LazyList::tail(Self[T]) -> Self[T]
fn[T] LazyList::tails(Self[T]) -> Self[Self[T]]
fn[T] LazyList::take(Self[T], Int) -> Self[T]
fn[T] LazyList::take_while(Self[T], (T) -> Bool) -> Self[T]
fn[T] LazyList::to_array(Self[T]) -> Array[T]
fn[T] LazyList::unfold(Self[T], (Self[T]) -> (T, Self[T])?) -> Self[T]
fn[T, W] LazyList::unzip(Self[(T, W)]) -> (Self[T], Self[W])
fn[A, B, C] LazyList::zip_lazy_normal(Self[A], (A, B) -> C, @list.T[B]) -> @list.T[C]
fn[A, B, C] LazyList::zip_with(Self[A], Self[B], (A, B) -> C) -> Self[C]
impl[T] Add for LazyList[T]
impl[T : Eq] Eq for LazyList[T]
impl[T : Show] Show for LazyList[T]

// Type aliases

// Traits

